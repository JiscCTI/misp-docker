# SPDX-FileCopyrightText: 2023 Jisc Services Limited
# SPDX-FileContributor: Joe Pitt
#
# SPDX-License-Identifier: GPL-3.0-only

name: Production Images
on:
  push:
    branches:
      - main
  schedule:
    - cron: '15 */6 * * *'
  workflow_dispatch:
env:
  COMPOSE_PROJECT_NAME: misp_test
jobs:
  run:
    name: Build, Test, and Release
    runs-on: ubuntu-latest
    steps:
      # Environment Setup
      - id: checkout
        name: Checkout Project
        uses: actions/checkout@v3
      - id: docker-login
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
      - id: setup-buildx
        name: Setup Docker buildx Environment
        uses: docker/setup-buildx-action@v2
      - id: test-env-setup
        name: Configure Environment
        run: |
          sed -i 's/jisccti/${{ vars.DOCKERHUB_ORGANISATION }}/g' docker-compose.yml
          sed -i 's/jisccti/${{ vars.DOCKERHUB_ORGANISATION }}/g' misp-workers/Dockerfile
          cp example.env .env
          mkdir -p persistent/$COMPOSE_PROJECT_NAME/gpg persistent/$COMPOSE_PROJECT_NAME/tls
          cat <<EOF > persistent/$COMPOSE_PROJECT_NAME/gpg/import.asc
          ${{ secrets.TEST_PGP_KEY }}
          EOF
          cat <<EOF > persistent/$COMPOSE_PROJECT_NAME/tls/misp.crt
          ${{ secrets.TEST_TLS_CERT }}
          EOF
          cat <<EOF > persistent/$COMPOSE_PROJECT_NAME/tls/misp.key
          ${{ secrets.TEST_TLS_KEY }}
          EOF

      # Load statuses
      - id: version
        name: Get current MISP version number
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: false
          latest: true
          prerelease: false
          repo: MISP/MISP
      - id: modules_version
        name: Get current MISP modules version number
        run: echo "MODULES_VERSION=$(python3 ./misp-modules/latest.py)" >> $GITHUB_ENV
      - id: modules_image_exists
        continue-on-error: true
        name: Check If misp-modules Image Exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          organization: ${{ vars.DOCKERHUB_ORGANISATION }}
          registry: registry.hub.docker.com
          repository: misp-modules
          tag: ${{ env.MODULES_VERSION }}
      - id: web_image_exists
        continue-on-error: true
        name: Check If misp-web Image Exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          organization: ${{ vars.DOCKERHUB_ORGANISATION }}
          registry: registry.hub.docker.com
          repository: misp-web
          tag: ${{ steps.version.outputs.tag_name }}
      - id: workers_image_exists
        continue-on-error: true
        name: Check If misp-workers Image Exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          organization: ${{ vars.DOCKERHUB_ORGANISATION }}
          registry: registry.hub.docker.com
          repository: misp-workers
          tag: ${{ steps.version.outputs.tag_name }}

      # Build / Pull Images
      - id: build_modules
        if: ${{ steps.modules_image_exists.outcome == 'failure' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        name: Build misp-modules
        run: |
          cd misp-modules
          docker build -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-modules:latest -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-modules:${{ env.MODULES_VERSION }} --build-arg MISP_VERSION="${{ env.MODULES_VERSION }}" .
          cd ..
      - id: pull_modules
        if: ${{ steps.modules_image_exists.outcome != 'failure' && github.event_name != 'push' && github.event_name != 'workflow_dispatch' }}
        name: Pull misp-modules
        run: docker pull ${{ vars.DOCKERHUB_ORGANISATION }}/misp-modules:latest
      - id: build_web
        if: ${{ steps.web_image_exists.outcome == 'failure' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        name: Build misp-web
        run: |
          cd misp-web
          docker build -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-web:latest -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-web:${{ steps.version.outputs.tag_name }} --build-arg MISP_VERSION="${{ steps.version.outputs.tag_name }}" .
          cd ..
      - id: pull_web
        if: ${{ steps.web_image_exists.outcome != 'failure' && github.event_name != 'push' && github.event_name != 'workflow_dispatch' }}
        name: Pull misp-web
        run: docker pull ${{ vars.DOCKERHUB_ORGANISATION }}/misp-web:latest
      - id: build_workers
        if: ${{ steps.workers_image_exists.outcome == 'failure' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        name: Build misp-workers
        run: |
          cd misp-workers
          docker build -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-workers:latest -t ${{ vars.DOCKERHUB_ORGANISATION }}/misp-workers:${{ steps.version.outputs.tag_name }} --build-arg MISP_VERSION="${{ steps.version.outputs.tag_name }}" .
          cd ..
      - id: pull_workers
        if: ${{ steps.workers_image_exists.outcome != 'failure' && github.event_name != 'push' && github.event_name != 'workflow_dispatch' }}
        name: Pull misp-workers
        run: docker pull ${{ vars.DOCKERHUB_ORGANISATION }}/misp-workers:latest

      # Test
      - id: start_test_env
        name: Deploy Test Instance
        run: docker compose up -d

      - id: initial_setup
        name: Wait for Initial Setup
        run: timeout 30m /bin/bash -c 'while [[ $(docker container ls --format {{.Status}} | grep -P "(unhealthy)|(starting)" | wc -l) -gt 0 ]] ; do sleep 30; done'
        continue-on-error: true

      - id: dump_logs
        name: Dump Container Log
        run: |
          docker compose logs
          docker compose down
          exit 1
        if: steps.initial_setup.outcome == 'failure'

      - id: stop_test_env
        name: Stop MISP
        run: docker compose down

      # Push New Images
      - id: push-modules
        name: Push misp-modules
        if: steps.build_modules.outcome == 'success'
        run: |
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-modules:${{ env.MODULES_VERSION }}
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-modules:latest
      - id: push-web
        name: Push misp-web
        if: steps.build_web.outcome == 'success'
        run: |
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-web:${{ steps.version.outputs.tag_name }}
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-web:latest
      - id: push-workers
        name: Push misp-workers
        if: steps.build_workers.outcome == 'success'
        run: |
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-workers:${{ steps.version.outputs.tag_name }}
          docker image push ${{ vars.DOCKERHUB_ORGANISATION }}/misp-workers:latest
